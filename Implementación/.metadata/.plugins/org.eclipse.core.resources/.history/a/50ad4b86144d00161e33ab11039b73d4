package sia.tfm.dbtester.DB;

import java.io.File;
import java.util.ArrayList;

public class MySQL {
	
	/**
	 * Clase que contiene las llamadas relativas a MySQL
	 * @version: 11/07/2016
	 * @author Xabier Zabala
	 */
	
	private MySQL(){}
	
	/**
	 * Método genera el esquema y tabla sobre el cual se realizarán
	 * las pruebas despues en MySQL
	 */
	
	public static void createStructure(){
		
	}
	
	/**
	 * Método que resuelve la operación de la petición realizada desde 
	 * la lógica de la aplicación
	 * @param op Identificador de la operación seleccionada.
	 * @return Array<String> Arreglo de String que representan el tiempo
	 * necesitado para realizar cada accion que compone la operación.
	 */
	
	public static ArrayList<String> operationResolver(String op){
		
		if(op.equals("0")){
			
		}else if(op.equals("1")){
			
		}else if(op.equals("2")){
			
		}
		
		return null; // IMPLEMENTAR
		
	}
	
	/**
	 * Método privado que cuantifica el tiempo transcurrido en 
	 * insertar los datos correspondientes a cada fichero en la DB.
	 * @param path Ruta del directorio en donde se encuentran 
	 * los ficheros.
	 * @return Array<String> Arreglo de String que representan el tiempo
	 * necesitado para realizar cada accion que compone la operación.
	 */
	// ArrayList<String>
	private void insertarDatos(String path){
		
		File f = new File(path);
		
		if(f.exists() && !f.isDirectory()){
			System.out.println("La especificada no corresponde a un directorio");
			System.exit(0);
		}else{
			
			ArrayList<String> results = new ArrayList<String>();
			
			File[] listOfFiles = f.listFiles(); 
			for(File file: listOfFiles){
				String name = file.getName();
				if (name.endsWith(".csv") || name.endsWith(".CSV")){
                    System.out.println(name);
                }
			}
		}	
	}
	

}
