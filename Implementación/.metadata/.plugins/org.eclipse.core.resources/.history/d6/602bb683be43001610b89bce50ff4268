package sia.tfm.dbtester.ConfigManager;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.regex.Pattern;

/**
 * Esta clase engloba los métodos necesarios para gestionar
 * el fichero de configuración.
 * @version: 05/07/2016
 * @author Xabier Zabala
 */

public class ConfigFile {
	
	/**
	 * Constructor privado de la clase {@link} ConfigFile
	 */
	
	private ConfigFile(){}
	
	/**
	 * Método que comprueba la existencia del fichero
	 * de configuración.
	 * @param path Directorio del fichero de configuración.
	 * @return boolean Devuelve true si el fichero existe,
	 * false en caso contrario.
	 */
	
	public static boolean configFileExists(String path){
		
		File f = new File(path);
		return f.exists() && !f.isDirectory();
		
	}
	
	/**
	 * Método que comprueba si todas las líneas del fichero
	 * de configuración cumplen con el formato requerido.
	 * @param path Directorio del fichero de configuración.
	 * @return boolean Devuelve true si el fichero está 
	 * correctamente configurado o vacío, en caso contrario,
	 * devuelve false.
	 */
	
	public static boolean configFileValidFormat(String path){
		
		File f = new File(path);
		FileReader fr = null;
	    BufferedReader br = null;
	    
		if(f.length() == 0){
			return true;
		}else{	
			try {
		         
	         fr = new FileReader (f);
	         br = new BufferedReader(fr);
	
	         String linea;
	         while((linea=br.readLine())!=null){
	        	 if(!lineValidFormat(linea)){
	        		 br.close();
	        		 fr.close();
	        		 return false;
	        	 }
	         }
	         	br.close();
	         	fr.close();
	         	return true;
		     }
		     catch(Exception e){
		        e.printStackTrace();
		        try{
		        	br.close();
	        		fr.close();
		        }catch(Exception e2){
		        	e.printStackTrace();
		        }
		        return false; 
		     }	
		}
	}
	
	/**
	 * Método privado que comprueba si una línea de fichero 
	 * cumple con el formato requerido:
	 * <ul>
  		<li>Cadenas de caracteres en formato clave:valor
  		<li>Línea vacía
  		<li>Comentario empezado por #
	   <p>
	 * @param linea Cada una de las líneas que forman 
	 * parte del fichero de configuración.
	 * @return boolean Devuelve true si la línea cumple con
	 * el formato exigido, en caso contrario devuelve false.
	 */
	
	private static boolean lineValidFormat(String linea){
		
		Pattern item = Pattern.compile("^[a-zA-Z0-9]+[:][a-zA-Z0-9.]+$");
		Pattern empty = Pattern.compile("^\\s*$");
		Pattern comment = Pattern.compile("^#.*$");
		
		return item.matcher(linea).find() || empty.matcher(linea).find() ||
			   comment.matcher(linea).find();	
	}
	

}
